from datetime import datetime, timedelta
from app import evolution
from app.models import WebhookPayload

# "Mem√≥ria" tempor√°ria do bot. No futuro, isso ser√° um banco de dados.
user_state = {}

def process_message(payload: WebhookPayload):
    """Processa um webhook de nova mensagem e decide qual a√ß√£o tomar."""
    
    sender_jid = payload.data.key.remoteJid
    sender_name = payload.data.pushName

    if not sender_jid or "@s.whatsapp.net" not in sender_jid:
        return

    print(f"Processando evento de {sender_name} ({sender_jid})")

    last_time = user_state.get(sender_jid, {}).get('last_message_time')
    intervalo = timedelta(hours=1)
    current_time = datetime.now()

    if not last_time or (current_time - last_time) > intervalo:
        # √â a primeira intera√ß√£o ou o contato retornou ap√≥s o intervalo.
        print(f"Primeira mensagem de {sender_name} no intervalo. Enviando menu de boas-vindas.")
        
        # Envia o menu principal como texto
        welcome_message = (
            f"Ol√°, {sender_name}! Bem-vindo(a) √† Cl√≠nica de Est√©tica Voga.\n\n"
            "Como podemos te ajudar hoje?\n\n"
            "Digite o n√∫mero da op√ß√£o desejada:\n"
            "1Ô∏è‚É£  *Conhecer nossos servi√ßos*\n"
            "2Ô∏è‚É£  *Agendar um hor√°rio*\n"
            "3Ô∏è‚É£  *Falar com um atendente*"
        )
        evolution.send_text(sender_jid, welcome_message)
        
        # Atualiza o estado do usu√°rio
        user_state[sender_jid] = {
            'last_message_time': current_time,
            'stage': 'main_menu' # Guardamos o "est√°gio" da conversa
        }

    else:
        # L√≥gica para mensagens subsequentes, baseada no que o usu√°rio DIGITOU
        
        # Extrai o texto limpo da resposta do usu√°rio
        message_text = ""
        if payload.data.message and payload.data.message.conversation:
            message_text = payload.data.message.conversation.strip().lower() # .lower() para ignorar mai√∫sculas
        
        current_stage = user_state.get(sender_jid, {}).get('stage')

        if current_stage == 'main_menu':
            if message_text == '1' or "servi√ßos" in message_text:
                servicos_texto = (
                    "Estes s√£o os nossos principais servi√ßos:\n\n"
                    "üíÜ‚Äç‚ôÄÔ∏è *Limpeza de Pele Profunda* - R$ 150,00\n"
                    "‚ú® *Massagem Modeladora* - R$ 120,00\n"
                    "‚úíÔ∏è *Design de Sobrancelhas* - R$ 70,00\n\n"
                    "Para agendar um destes servi√ßos, digite *2*."
                )
                evolution.send_text(sender_jid, servicos_texto)
            
            elif message_text == '2' or "agendar" in message_text:
                evolution.send_text(sender_jid, "√ìtimo! Para qual dos nossos servi√ßos voc√™ gostaria de agendar um hor√°rio?")
                user_state[sender_jid]['stage'] = 'agendando_servico'
            
            elif message_text == '3' or "atendente" in message_text:
                evolution.send_text(sender_jid, "Entendido. Um de nossos atendentes ir√° te responder nesta mesma conversa o mais breve poss√≠vel.")
                user_state[sender_jid]['stage'] = 'aguardando_atendente'
            
            else:
                evolution.send_text(sender_jid, "Op√ß√£o inv√°lida. Por favor, digite *1*, *2* ou *3* para continuar.")
        
        # Atualiza a hora da √∫ltima mensagem
        user_state.setdefault(sender_jid, {})['last_message_time'] = current_time